var bmbCommon = (function () {
    function getErrorMessage(error) {
        var msg = "";

        if (error) {
            if (error.responseText && error.responseText != "") {
                try {
                    var response = JSON.parse(error.responseText);

                    if (response.Message) {
                        msg = response.Message;
                    }
                    else {
                        if (response.ExceptionMessage && response.ExceptionMessage != "") {
                            msg = response.ExceptionMessage;
                        }
                        else {
                            msg = response;
                        }
                    }
                }
                catch (e) {
                    msg = error.responseText;
                }
            }
            else if (error.statusText && error.statusText != "") {
                msg = error.statusText;
            }
            else {
                if (error.message) {
                    msg = error.message;
                }
                else {
                    msg = error;
                }
            }
        }

        return msg;
    }

    function displayMessage(msg, page) {
        $("#" + page).find(".errorNotification").html(msg);
        $("#" + page).find(".msgPanel").css("display", "block");
    }

    function clearMessagePanel(page) {
        $("#" + page).find(".errorNotification").html("");
        $("#" + page).find(".msgPanel").css("display", "none");
    }

    return {
        getErrorMessage: getErrorMessage,
        displayMessage: displayMessage,
        clearMessagePanel: clearMessagePanel
    };
})();


var bmbAPI = (function (bmbCommon) {
    function login(userName, password) {
        var data = { Username: userName, Password: password };

        return $.ajax({
            type: "POST",
            url: "api/login",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            headers: { "cache-control": "no-cache" },
            success: function (data) {
                localStorage.setItem("UserName", userName);
                localStorage.setItem("Password", password);
                $("#userName").val("");
                $("#password").val("");

                var loginResponse = JSON.parse(data.Content);
                localStorage.setItem("UID", loginResponse.Uid);
                localStorage.setItem("KeyFetchToken", loginResponse.KeyFetchToken);
                localStorage.setItem("SessionToken", loginResponse.SessionToken);

                $("#verificationLinkInput").show();
                $("#Verify").show();
                $("#Logout").show();
            },
            error: function (error) {
                bmbCommon.displayMessage(bmbCommon.getErrorMessage(error), "Auth");
            }
        });
    }

    function verifyLogin(verificationLink) {
        var data = { UID: localStorage.getItem("UID"), VerificationLink: verificationLink };

        return $.ajax({
            type: "POST",
            url: "api/verify",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            headers: { "cache-control": "no-cache" },
            success: function (data) {
                $("#verificationLink").val("");
                $("#Login").hide();
                $("#Refresh").show();
                $("#Verify").hide();
                $("#Logout").show();
                $("#Backup").show();

                localStorage.removeItem("UID");
            },
            error: function (error) {
                bmbCommon.displayMessage(bmbCommon.getErrorMessage(error), "Auth");
            }
        });
    }

    function loadBookmarks(userName, password) {
        var keyFetchToken = localStorage.getItem("KeyFetchToken");
        var sessionToken = localStorage.getItem("SessionToken");
        var url = "api/bookmark?username=" + encodeURIComponent(userName) + "&password=" + encodeURIComponent(password);
        url += "&keyFetchToken=" + keyFetchToken + "&sessionToken=" + sessionToken;

        $.ajax({
            type: "GET",
            url: url,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            headers: { "cache-control": "no-cache" },
            success: function (data) {
                var mainDir = JSON.parse(data.Content);

                localStorage.setItem("CurrentBookmarks", data.Content);
                localStorage.setItem("BookmarkCount", mainDir.Tag);
                localStorage.setItem("LastRefresh", new Date().toISOString());
            },
            error: function (error) {
                bmbCommon.displayMessage(bmbCommon.getErrorMessage(error), "Auth");
            }
        });
    }

    function ajaxCompleted(e, xhr, settings) {
        if (settings.url.indexOf("api/bookmark") > -1) {
            if (xhr.status < 400 && (settings.url.indexOf("/backup") === -1 || (settings.url.indexOf("/backup") > -1 && settings.type === "GET"))) {
                $("body").pagecontainer("change", "#Bookmarks", { reload: true });
            }

            $.mobile.loading("hide");
        }
        else if (settings.url.indexOf("api/login") > -1) {
            $.mobile.loading("hide");
        }
    }

    return {
        login: login,
        verifyLogin: verifyLogin,
        loadBookmarks: loadBookmarks,
        ajaxCompleted: ajaxCompleted
    };
})(bmbCommon);


// Bookmarks
function Bookmarks_PageBeforeShow(event, ui) {
    if (!localStorage.getItem("CurrentBookmarks")) {
        bmbCommon.displayMessage("Go to the Authentication page to enter your Sync credentials", "Bookmarks");
        $("#bookmarkContainer").hide();
        return;
    }

    bmbCommon.clearMessagePanel("Bookmarks");

    if (!ko.dataFor($("#bookmarkContainer")[0])) {
        applyBindings();

        // We need to show the bookmark container in case the app was started in a logged-out state
        // and the user just logged in, otherwise it will stay in its default hidden state until a 
        // full page refresh.
        $("#bookmarkContainer").show();
    }

    // For some reason an explicit refresh of the bookmark list is required when transitioning to 
    // a new directory, otherwise the jQuery Mobile styles won't be applied. This step wasn't necessary 
    // with JQM 1.2 and Knockout 2.1, so something obviously changed in the newer version of one or both 
    // of those.
    $("#bmMain").listview("refresh");
}

function Bookmarks_PageChangeFailed(event, ui) {
}

function doNavigation(sender) {
    var nodePath;
    var newHeader;
    var newPath;

    if (sender.id === "backButton") {
        nodePath = $(sender).attr("data-nodepath").split("\\");
        nodePath.pop();

        if (nodePath.length === 0) {
            return;
        }

        if (nodePath.length === 2) {
            newPath = "Root";
            newHeader = "Bookmarks";
        }
        else {
            newPath = nodePath.join("\\");
            nodePath.shift();
            newHeader = nodePath[nodePath.length - 1];
        }

        $("#backButton").attr("data-nodepath", newPath);
    }
    else if (sender.id === "topButton") {
        if ($("#backButton").attr("data-nodepath") === "Root") {
            return;
        }

        newHeader = "Bookmarks";
        $("#backButton").attr("data-nodepath", "Root");
    }
    else {
        nodePath = $(sender).attr("data-nodepath").split("\\");
        nodePath.shift();
        newHeader = nodePath[nodePath.length - 1];
        $("#backButton").attr("data-nodepath", $(sender).attr("data-nodepath"));
    }

    var currentBookmarks = JSON.parse(localStorage.getItem("CurrentBookmarks"));
    var curNode = getNode(currentBookmarks.BookmarkItems, nodePath);
    ko.dataFor($("#bookmarkContainer")[0]).setBookmarks(curNode);
    $("#bmHeader").html(newHeader);
    $("body").pagecontainer("change", "#Bookmarks", { transition: "fade", allowSamePageTransition: true });
}

function getNode(items, nodePath) {
    var curDir;
    var node = null;

    if (nodePath) {
        curDir = nodePath.shift();

        for (var i = 0; i < items.length; i++) {
            if (items[i].Name === curDir && items[i].ItemType === 0) {
                // We know to stop when we've found the final directory in the node's path
                if (nodePath.length === 0) {
                    node = items[i];
                    break;
                }
                else {
                    node = getNode(items[i].BookmarkItems, nodePath);
                    break;
                }
            }
        }
    }

    return node;
}

// Settings
function Settings_PageBeforeShow(event, ui) {
    bmbCommon.clearMessagePanel("Settings");
    loadSettingsPage();
}

function Settings_PageChangeFailed(event, ui) {
}

function loadSettingsPage() {
    var loadOnStartup = false;
    var lastDirOnStartup = false;

    if (localStorage.getItem("LoadOnStartup") === "True") {
        loadOnStartup = true;
    }

    if (localStorage.getItem("LastDirOnStartup") === "True") {
        lastDirOnStartup = true;
    }

    $("#loadOnStartup").prop("checked", loadOnStartup).checkboxradio("refresh");
    $("#lastDirOnStartup").prop("checked", lastDirOnStartup).checkboxradio("refresh");
}

function Save_OnClick() {
    var loadOnStartup = "False";
    var lastDirOnStartup = "False";

    var saveTimer = setTimeout(function () {
        $.mobile.loading("hide");
        clearTimeout(saveTimer);
    }, 1000);

    $.mobile.loading("show", { theme: "c", text: "Saving ...", textVisible: true, textonly: true });

    if ($("#loadOnStartup").prop("checked")) {
        loadOnStartup = "True";
    }

    if ($("#lastDirOnStartup").prop("checked")) {
        lastDirOnStartup = "True";
    }

    localStorage.setItem("LoadOnStartup", loadOnStartup);
    localStorage.setItem("LastDirOnStartup", lastDirOnStartup);

    return false;
}

// Auth
function Auth_PageBeforeShow(event, ui) {
    bmbCommon.clearMessagePanel("Auth");
    loadAuthPage();
}

function loadAuthPage() {
    var bookmarks = localStorage.getItem("CurrentBookmarks");

    if (bookmarks) {
        $("#currentUser").html(localStorage.getItem("UserName"));
        $("#bookmarkCount").html(localStorage.getItem("BookmarkCount"));
        $("#lastRefresh").html(moment(localStorage.getItem("LastRefresh")).format("LLL"));
        $("#LoggedOutContainer").hide();
        $("#LoggedInContainer").show();
        $("#verificationLinkInput").hide();
        $("#Login").hide();
        $("#Refresh").show();
        $("#Logout").show();
        $("#Backup").show();
    }
    else {
        $("#userName").val("");
        $("#password").val("");
    }
}

function Login_OnClick() {
    return Refresh_OnClick($("#userName").val(), $("#password").val());
}

function Logout_OnClick() {
    $.mobile.loading("show", { theme: "c" });

    localStorage.removeItem("UserName");
    localStorage.removeItem("Password");
    localStorage.removeItem("CurrentBookmarks");
    localStorage.removeItem("BookmarkCount");
    localStorage.removeItem("LastRefresh");
    localStorage.removeItem("CurrentNode");
    sessionStorage.removeItem("CurrentNode")

    $("#userName").val("")
    $("#password").val("")
    $("#LoggedInContainer").hide();
    $("#LoggedOutContainer").show();
    $("#verificationLinkInput").hide();
    $("#verificationLink").val("");
    $("#Login").show();
    $("#Refresh").hide();
    $("#Verify").hide();
    $("#Logout").hide();
    $("#Backup").hide();
    bmbCommon.clearMessagePanel("Auth");

    var bindingModel = ko.dataFor($("#bookmarkContainer")[0]);

    if (bindingModel) {
        bindingModel.removeBookmarks();
    }

    $.mobile.loading("hide");
    $("body").pagecontainer("change", "#Auth", { allowSamePageTransition: true });

    return false;
}

function Refresh_OnClick(userNameParam, passwordParam) {
    var userName;
    var password;

    if (userNameParam) {
        userName = userNameParam;
    }
    else {
        userName = localStorage.getItem("UserName");
    }

    if (passwordParam) {
        password = passwordParam;
    }
    else {
        password = localStorage.getItem("Password");
    }

    if (!userName || userName === "") {
        bmbCommon.displayMessage("Username cannot be blank", "Auth");
        return false;
    }

    if (!password || password === "") {
        bmbCommon.displayMessage("Password cannot be blank", "Auth");
        return false;
    }

    bmbCommon.clearMessagePanel("Auth");
    $.mobile.loading("show", { theme: "c", text: "Authenticating ...", textVisible: true });
    bmbAPI.login(userName, password);

    return false;
}

function VerifyLogin_OnClick() {
    var userName = localStorage.getItem("UserName");
    var password = localStorage.getItem("Password");
    var keyFetchToken = localStorage.getItem("KeyFetchToken");
    var sessionToken = localStorage.getItem("SessionToken");
    var verificationLink = $("#verificationLink").val();

    if (!verificationLink || verificationLink === "") {
        bmbCommon.displayMessage("Verification link cannot be blank", "Auth");
        return false;
    }

    bmbCommon.clearMessagePanel("Auth");
    $.mobile.loading("show", { theme: "c", text: "Loading ...", textVisible: true });

    bmbAPI.verifyLogin(verificationLink).then(function (data, status, jqXHR) {
        bmbAPI.loadBookmarks(userName, password);
    }, function (data, status, jqXHR) {
        bmbCommon.displayMessage(bmbCommon.getErrorMessage(data), "Auth");
    });

    return false;
}

function Backup_OnClick() {
    $.mobile.loading("show", { theme: "c", text: "Backing up data ...", textVisible: true });
    var userName = localStorage.getItem("UserName");
    var password = localStorage.getItem("Password");
    var bookmarkData = localStorage.getItem("CurrentBookmarks");

    if (bookmarkData) {
        var data = {};
        data.bookmarkData = bookmarkData;
        data.count = localStorage.getItem("BookmarkCount");
        data.lastRefresh = localStorage.getItem("LastRefresh");

        $.ajax({
            type: "POST",
            url: "api/bookmark/backup?username=" + encodeURIComponent(userName) + "&password=" + encodeURIComponent(password),
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            headers: {"cache-control":"no-cache"},
            success: function (data) {
                bmbCommon.displayMessage("Data backed up successfully", "Auth");
            },
            error: function (error) {
                bmbCommon.displayMessage(bmbCommon.getErrorMessage(error), "Auth");
            }
        });
    }

    return false;
}

function Restore_OnClick() {
    var userName = localStorage.getItem("UserName");
    var password = localStorage.getItem("Password");

    if (!userName || !password) {
        userName = $("#userName").val();
        password = $("#password").val();

        if (!userName) {
            bmbCommon.displayMessage("User name cannot be blank", "Auth");
            return false;
        }
        if (!password) {
            bmbCommon.displayMessage("Password cannot be blank", "Auth");
            return false;
        }
    }

    $.mobile.loading("show", { theme: "c", text: "Restoring data ...", textVisible: true });

    $.ajax({
        type: "GET",
        url: "api/bookmark/backup?username=" + encodeURIComponent(userName) + "&password=" + encodeURIComponent(password),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        headers: {"cache-control":"no-cache"},
        success: function (response) {
            var data = JSON.parse(response.Content);
            localStorage.setItem("CurrentBookmarks", data.bookmarkData);
            localStorage.setItem("BookmarkCount", data.count);
            localStorage.setItem("LastRefresh", data.lastRefresh);

            localStorage.setItem("UserName", userName);
            localStorage.setItem("Password", password);
        },
        error: function (error) {
            bmbCommon.displayMessage(bmbCommon.getErrorMessage(error), "Auth");
        }
    });

    return false;
}

var bookmarksViewModel = function () {
    var self = this;
    var currentBookmarks = JSON.parse(localStorage.getItem("CurrentBookmarks"));
    var curNode;
    var nodePath;
    var nodeData;
    var showLastDir = localStorage.getItem("LastDirOnStartup");

    if (showLastDir && showLastDir === "True") {
        nodeData = localStorage.getItem("CurrentNode");
    }
    else {
        nodeData = sessionStorage.getItem("CurrentNode");
    }

    // If we need to show a particular directory at bind time, fetch that directory's bookmark items
    if (nodeData) {
        curNode = JSON.parse(nodeData);
        $("#backButton").attr("data-nodepath", curNode.Path);
        nodePath = curNode.Path.split("\\");
        $("#bmHeader").html(nodePath[nodePath.length - 1]);

        self.BookmarksToolbar = ko.observableArray(curNode.BookmarkItems);
        self.BookmarksMenu = ko.observableArray([]);
        $("#toolbarDivider").hide();
        $("#menuDivider").hide();
    }
    else {
        self.BookmarksToolbar = ko.observableArray(currentBookmarks.BookmarkItems[0].BookmarkItems);
        self.BookmarksMenu = ko.observableArray(currentBookmarks.BookmarkItems[1].BookmarkItems);
        $("#bmHeader").html("Bookmarks");
    }

    self.setBookmarks = function (node) {
        if (node) {
            self.BookmarksToolbar(node.BookmarkItems);
            self.BookmarksMenu([]);
            sessionStorage.setItem("CurrentNode", JSON.stringify(node));
            localStorage.setItem("CurrentNode", JSON.stringify(node));

            $("#toolbarDivider").hide();
            $("#menuDivider").hide();
        }
        else {
            // We are back at the topmost level, so show the toolbar and menu bookmarks
            self.BookmarksToolbar(currentBookmarks.BookmarkItems[0].BookmarkItems);
            self.BookmarksMenu(currentBookmarks.BookmarkItems[1].BookmarkItems);
            sessionStorage.removeItem("CurrentNode");
            localStorage.removeItem("CurrentNode");
            $("#bmHeader").html("Bookmarks");

            $("#toolbarDivider").show();
            $("#menuDivider").show();
        }
    }

    self.removeBookmarks = function() {
        self.BookmarksToolbar([]);
        self.BookmarksMenu([]);
    }
};

function applyBindings() {
    ko.bindingHandlers.bookmarkItemType = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            $(element).find(".nameBlock").html(viewModel.Name);

            if (viewModel.ItemType === 0) {
                $(element).jqmData('icon', 'arrow-r');
                $(element).find("a").attr("onclick", "doNavigation(this);");
                $(element).find("img").attr("src", "Images/folder.png");
                $(element).find(".locationBlock").hide();
            }
            else if (viewModel.ItemType === 1) {
                $(element).find("a").attr("target", "_blank");
                $(element).find("img").attr("src", "Images/bookmark.png");
                $(element).find(".locationBlock").html(viewModel.Location).show();
            }
            else if (viewModel.ItemType === 2) {
                // TODO: Add code to adjust the list item to look like a separator
            }
        }
    };

    ko.applyBindings(new bookmarksViewModel());
}
